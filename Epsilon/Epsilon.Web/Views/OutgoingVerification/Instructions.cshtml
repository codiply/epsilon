@model Epsilon.Web.Models.ViewModels.OutgoingVerification.InstructionsViewModel
@using Epsilon.Resources.Web.OutgoingVerification
@using Epsilon.Resources.Common
@using Epsilon.Resources.Web.OutgoingVerification
@using Epsilon.Logic.Helpers.Interfaces
@using Epsilon.Logic.Constants.Enums
@using Epsilon.Logic.Helpers

@{
    ViewBag.Title = OutgoingVerificationResources.Instructions_PageTitle;

    var countryVariantResourceHelper = DependencyResolver.Current.GetService<ICountryVariantResourceHelper>();
    var countryVariantResources = countryVariantResourceHelper.GetVariantsForCountry(Model.Instructions.RecipientAddress.CountryId,
        new List<CountryVariantResourceName> {
            CountryVariantResourceName.OutgoingVerificationInstructions_AddressChecker_DisplayName,
            CountryVariantResourceName.OutgoingVerificationInstructions_AddressChecker_Url,
            CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_1_DisplayName,
            CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_1_Url,
            CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_2_DisplayName,
            CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_2_Url
        });
}

<h3>@OutgoingVerificationResources.Instructions_PageHeader</h3>
<hr />

<div class="form-horizontal">
    <div class="form-group">
        @Html.Partial("_VerificationRecipient", Model.Instructions.RecipientAddress)
    </div>

    <div>
        <h4>@(CommonResources.Step1): @(OutgoingVerificationResources.Instructions_StepVerifyValidAddress_Header)</h4>
    </div>

    @{
        // TODO_PANOS_TEST: Unit test that checks that everry country and and language has both of them defined (non-empty string).
        var addressCheckerUrl = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_AddressChecker_Url)];
        var addressCheckerDisplayName = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_AddressChecker_DisplayName)];
    }

    <div>
        <a href="@addressCheckerUrl">@addressCheckerDisplayName</a>
    </div>

    @* TODO_PANOS: invert logic*@
    @if (!Model.Instructions.OtherUserHasMarkedAddressAsInvalid)
    {
    <div class="form-group">
        <div class="alert alert-danger">
            <p>
                @OutgoingVerificationResources.Instructions_OtherUserHasMarkedAddressAsInvalid_Message
            </p>
        </div>
    </div>
    }

    @if (Model.Instructions.CanMarkAddressAsInvalid)
    {
    <div>
        @using (Html.BeginForm("MarkAddressAsInvalid", "OutgoingVerification"))
        {
            @Html.AntiForgeryToken()

            <input type="hidden" name="verificationUniqueId" value="@Model.Instructions.VerificationUniqueId" />
            <input type="hidden" name="returnToSummary" value="@Model.ReturnToSummary.ToString()" />
            <button class="btn btn-default" type="submit"
                    title="@OutgoingVerificationResources.Instructions_ActionMarkAddressAsInvalid_ButtonHoverText"
                    onclick="return confirm('@OutgoingVerificationResources.Instructions_ActionMarkAddressAsInvalid_ButtonConfirmationText')">
                @OutgoingVerificationResources.Instructions_ActionMarkAddressAsInvalid_ButtonText
            </button>
        }
    </div>
    }

    <div>
        <h4>@(CommonResources.Step2):@(OutgoingVerificationResources.Instructions_StepSendVerification_Header)</h4>
    </div>

    @{
        // TODO_PANOS_TEST: Unit test that checks that everry country and and language has at least one provider defined (non-empty strings).
        var paperMailOnlinleProvider1Url = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_1_Url)];
        var paperMailOnlinleProvider1DisplayName = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_1_DisplayName)];
        var paperMailOnlinleProvider2Url = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_2_Url)];
        var paperMailOnlinleProvider2DisplayName = countryVariantResources[EnumsHelper.CountryVariantResourceName
            .ToString(CountryVariantResourceName.OutgoingVerificationInstructions_SendPaperMailOnlineProvider_2_DisplayName)];
    }

    <div>
        <ul>
            @if (!string.IsNullOrWhiteSpace(paperMailOnlinleProvider1Url) && !string.IsNullOrWhiteSpace(paperMailOnlinleProvider1DisplayName))
            {
                <li>
                    <a href="@paperMailOnlinleProvider1Url">@paperMailOnlinleProvider1DisplayName</a>
                </li>
            }
            @if (!string.IsNullOrWhiteSpace(paperMailOnlinleProvider2Url) && !string.IsNullOrWhiteSpace(paperMailOnlinleProvider2DisplayName))
            {
                <li>
                    <a href="@paperMailOnlinleProvider2Url">@paperMailOnlinleProvider2DisplayName</a>
                </li>
            }
        </ul>
    </div>

    <div class="form-group">
        @Html.Partial("_VerificationMessage", Model.Instructions.MessageArguments)
    </div>
    <p>@Html.ActionLink("Printable version", "PrintableVerificationMessage", new { id = Model.Instructions.VerificationUniqueId })</p>

    @if (Model.Instructions.CanMarkAsSent)
    {
    <div>
        @using (Html.BeginForm("MarkAsSent", "OutgoingVerification"))
        {
            @Html.AntiForgeryToken()

            <input type="hidden" name="verificationUniqueId" value="@Model.Instructions.VerificationUniqueId" />
            <input type="hidden" name="returnToSummary" value="@Model.ReturnToSummary.ToString()" />
            <button class="btn btn-default" type="submit"
                    title="@OutgoingVerificationResources.Instructions_ActionMarkAsSent_ButtonHoverText"
                    onclick="return confirm('@OutgoingVerificationResources.Instructions_ActionMarkAsSent_ButtonConfirmationText')">
                @OutgoingVerificationResources.Instructions_ActionMarkAsSent_ButtonText
            </button>
        }
    </div>
    }
</div>

@using Epsilon.Logic.Constants
@using Epsilon.Resources.Common
@using Epsilon.Web.Controllers

<div>
    @if (Model.ReturnToSummary)
    {
        @Html.ActionLink(CommonResources.BackLinkText, OutgoingVerificationController.MY_OUTGOING_VERIFICATIONS_SUMMARY_ACTION)
    }
    else
    {
        @Html.ActionLink(CommonResources.BackLinkText, AppConstant.AUTHENTICATED_USER_HOME_ACTION, AppConstant.AUTHENTICATED_USER_HOME_CONTROLLER)
    }
</div>
