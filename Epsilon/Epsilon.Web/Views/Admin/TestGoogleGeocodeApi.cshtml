@model Epsilon.Web.Models.ViewModels.Admin.TestGoogleGeocodeApiViewModel

@{
    ViewBag.Title = "Test Google Geocode API";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.Response))
        {
            for (var i = 0; i < Model.Geometries.Count(); i++)
            { 
            <div class="form-group">
                <div class="col-md-3"></div>
                <div class="col-md-9">
                    <div id="map-canvas-@i" class="map-canvas"></div>
                </div>
            </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.Response, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    <pre class="prettyprint">
                        @Html.Raw(Model.Response)
                    </pre>
                </div>
            </div>
        }
    </div>
}

<div>
    @Html.ActionLink("Back to Admin", "Index")
</div>

@section Styles {
    <style>
        .map-canvas {
            width: 500px;
            height: 400px;
        }
    </style>
    @Styles.Render("~/Content/prettify")
}

@section Scripts {
    @if (!string.IsNullOrWhiteSpace(Model.Response))
    {
        <script src="https://maps.googleapis.com/maps/api/js"></script>
        <script>
            function initialize() {
                @for (var i = 0; i < Model.Geometries.Count; i++)
                {
                    var geometry = Model.Geometries[i];
                <text>
                    var mapCanvas@(i) = document.getElementById('map-canvas-@i');
                    var mapOptions@(i) = {
                        center: new google.maps.LatLng(@geometry.Location.Latitude, @geometry.Location.Longitude),
                        mapTypeId: google.maps.MapTypeId.ROADMAP
                    }
                    var map@(i) = new google.maps.Map(mapCanvas@(i), mapOptions@(i));
                    var bounds@(i) = new google.maps.LatLngBounds();
                    var northeast@(i) = new google.maps.LatLng(@geometry.Viewport.Northeast.Latitude, @geometry.Viewport.Northeast.Longitude);
                    bounds@(i).extend(northeast@(i));
                    var southwest@(i) = new google.maps.LatLng(@geometry.Viewport.Southwest.Latitude, @geometry.Viewport.Southwest.Longitude);
                    bounds@(i).extend(southwest@(i));
                    map@(i).fitBounds(bounds@(i));
                </text>
                }
            }
            google.maps.event.addDomListener(window, 'load', initialize);
        </script>
    }
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/run_prettify")
}
