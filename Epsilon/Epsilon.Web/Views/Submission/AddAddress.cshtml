@model Epsilon.Logic.Forms.AddressForm

@using Epsilon.Logic.Constants.Enums
@using Epsilon.Resources.Common
@using Epsilon.Resources.Web.Submission
@using Epsilon.Logic.Helpers.Interfaces
@using Epsilon.Logic.Constants.Interfaces
@using Epsilon.Logic.Helpers

@{
    ViewBag.Title = SubmissionResources.AddAddress_PageTitle;

    var countryVariantResourceHelper = DependencyResolver.Current.GetService<ICountryVariantResourceHelper>();
    var countryAddressFieldMetadata = DependencyResolver.Current.GetService<ICountryAddressFieldMetadata>();

    var tmpEnumCountryId = EnumsHelper.CountryId.Parse(Model.CountryId);
    if (!tmpEnumCountryId.HasValue)
    {
        throw new Exception(String.Format("Uknown CountryId {0}.", Model.CountryId));
    }
    var enumCountryId = tmpEnumCountryId.Value;

    var fieldMetadata = countryAddressFieldMetadata.GetForCountry(enumCountryId);

    var countryVariantResources = countryVariantResourceHelper.GetVariantsForCountry(Model.CountryId,
        new List<CountryVariantResourceName> {
                    CountryVariantResourceName.Address_Line1,
                    CountryVariantResourceName.Address_Line2,
                    CountryVariantResourceName.Address_Line3,
                    CountryVariantResourceName.Address_Line4,
                    CountryVariantResourceName.Address_Locality,
                    CountryVariantResourceName.Address_Region,
                    CountryVariantResourceName.Address_Postcode
        });
}

@using (Html.BeginForm("SaveAddress", "Submission"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@SubmissionResources.AddAddress_PageHeader</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @if (fieldMetadata.Line1.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Line1)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Line1">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Line1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Line1, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        @if (fieldMetadata.Line2.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Line2)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Line2">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Line2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Line2, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        @if (fieldMetadata.Line3.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Line3)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Line3">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Line3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Line3, "", new { @class = "text-danger" })
            </div>
        </div>
        }


        @if (fieldMetadata.Line4.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Line4)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Line4">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Line4, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Line4, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        @if (fieldMetadata.Locality.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Locality)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Locality">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Locality, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Locality, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        @if (fieldMetadata.Region.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Region)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Region">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        @if (fieldMetadata.Postcode.IsUsed)
        {
            var label = @countryVariantResources[EnumsHelper.CountryVariantResourceName.ToString(CountryVariantResourceName.Address_Postcode)];
        <div class="form-group">
            <label class="control-label col-md-3" for="Postcode">@label</label>
            <div class="col-md-9">
                @Html.EditorFor(model => model.Postcode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "text-danger" })
            </div>
        </div>
        }

        <div class="form-group">
            <label class="control-label col-md-3" for="CountryId">@CommonResources.Country</label>
            <div class="col-md-9">
                @Html.HiddenFor(model => model.CountryId)
                @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control", @disabled = "" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9 alert alert-info">
                <p><input type="checkbox" name="confirmedText" data-ng-model="confirmedText">
                    @SubmissionResources.AddAddress_ConfirmationText
                </p>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="@SubmissionResources.AddAddress_SubmitButton" 
                       class="btn btn-default" data-ng-disabled="!confirmedText"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink(SubmissionResources.AddAddress_BackToSearchLink, "SearchAddress")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
